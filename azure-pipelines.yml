trigger:
  batch: true
  branches:
    include:
      - "*"

pr: none


stages:
  - stage: Versioning
    dependsOn: []
    jobs:
      - job: "GitVersion"
        pool:
          name: "DAS - Continuous Integration"
        steps:
          - task: gittools.gitversion-preview.gitversion-task.GitVersion@5
            displayName: GitVersion
            inputs:
              configFilePath: GitVersion.yml
  - stage: Test
    dependsOn: []
    jobs:
      - job: "Windows_PSCore_Build_DAS_Continuous_Integration"
        pool:
          name: "DAS - Continuous Integration"
          demands:
            - agent.OS -equals Windows_NT
            - npm
            - node.js
        workspace:
          clean: all
        steps:
          - script: |
              npm install eclint
              node ./node_modules/eclint/bin/eclint.js check
            displayName: "Validate editorconfig"
            workingDirectory: $(System.DefaultWorkingDirectory)
          - task: PowerShell@2
            inputs:
              filePath: "Tests/Invoke-Tests.ps1"
              pwsh: true
          - task: PublishTestResults@2
            displayName: "Publish Test Results **/TEST-*.xml"
            inputs:
              testResultsFormat: NUnit
              testResultsFiles: "**/TEST-*.xml"
            condition: succeededOrFailed()
          - publish: $(System.DefaultWorkingDirectory)/Infrastructure-Scripts
            artifact: Infrastructure-Scripts
            displayName: "Publish Scripts"

      - job: "Linux_PSCore_Build_DAS_Continuous_Integration"
        pool:
          name: "DAS - Continuous Integration"
          demands:
            - agent.OS -equals Linux
            - npm
            - node.js
        workspace:
          clean: all
        steps:
          - script: |
              npm install eclint
              node $(npm root)/eclint/bin/eclint.js check $(System.DefaultWorkingDirectory)
            displayName: "Validate editorconfig"
            workingDirectory: $(System.DefaultWorkingDirectory)
          - task: PowerShell@2
            inputs:
              filePath: "Tests/Invoke-Tests.ps1"
              pwsh: true
          - task: PublishTestResults@2
            displayName: "Publish Test Results **/TEST-*.xml"
            inputs:
              testResultsFormat: NUnit
              testResultsFiles: "**/TEST-*.xml"
            condition: succeededOrFailed()

  - stage: Release
    dependsOn:
      - Versioning
      - Test
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
    - deployment: "GitHubRelease"
      displayName: "Create Release in GitHub"
      pool:
        name: "DAS - Continuous Deployment Agents"
      environment: GitHub
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: Infrastructure-Scripts
              - task: GitHubRelease@0
                inputs:
                  gitHubConnection: "SFA"
                  repositoryName: "$(Build.Repository.Name)"
                  action: "create"
                  target: "$(Build.SourceVersion)"
                  tagSource: "manual"
                  tag: "$(Build.BuildNumber)"
                  addChangeLog: true
                  assets: $(Pipeline.Workspace)/Infrastructure-Scripts/**/*.ps1
